{"ast":null,"code":"import { onAuthStateChanged, onIdTokenChanged, getIdToken } from 'firebase/auth';\nimport { Observable, from, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Create an observable of authentication state. The observer is only\r\n * triggered on sign-in or sign-out.\r\n * @param auth firebase.auth.Auth\r\n */\nfunction authState(auth) {\n  return new Observable(function (subscriber) {\n    var unsubscribe = onAuthStateChanged(auth, subscriber.next.bind(subscriber), subscriber.error.bind(subscriber), subscriber.complete.bind(subscriber));\n    return {\n      unsubscribe: unsubscribe\n    };\n  });\n}\n/**\r\n * Create an observable of user state. The observer is triggered for sign-in,\r\n * sign-out, and token refresh events\r\n * @param auth firebase.auth.Auth\r\n */\nfunction user(auth) {\n  return new Observable(function (subscriber) {\n    var unsubscribe = onIdTokenChanged(auth, subscriber.next.bind(subscriber), subscriber.error.bind(subscriber), subscriber.complete.bind(subscriber));\n    return {\n      unsubscribe: unsubscribe\n    };\n  });\n}\n/**\r\n * Create an observable of idToken state. The observer is triggered for sign-in,\r\n * sign-out, and token refresh events\r\n * @param auth firebase.auth.Auth\r\n */\nfunction idToken(auth) {\n  return user(auth).pipe(switchMap(function (user) {\n    return user ? from(getIdToken(user)) : of(null);\n  }));\n}\nexport { authState, idToken, user };","map":{"version":3,"names":["onAuthStateChanged","onIdTokenChanged","getIdToken","Observable","from","of","switchMap","authState","auth","subscriber","unsubscribe","next","bind","error","complete","user","idToken","pipe"],"sources":["C:/ProjetoIntegrado/node_modules/rxfire/auth/index.esm.js"],"sourcesContent":["import { onAuthStateChanged, onIdTokenChanged, getIdToken } from 'firebase/auth';\r\nimport { Observable, from, of } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\n\r\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Create an observable of authentication state. The observer is only\r\n * triggered on sign-in or sign-out.\r\n * @param auth firebase.auth.Auth\r\n */\r\nfunction authState(auth) {\r\n    return new Observable(function (subscriber) {\r\n        var unsubscribe = onAuthStateChanged(auth, subscriber.next.bind(subscriber), subscriber.error.bind(subscriber), subscriber.complete.bind(subscriber));\r\n        return { unsubscribe: unsubscribe };\r\n    });\r\n}\r\n/**\r\n * Create an observable of user state. The observer is triggered for sign-in,\r\n * sign-out, and token refresh events\r\n * @param auth firebase.auth.Auth\r\n */\r\nfunction user(auth) {\r\n    return new Observable(function (subscriber) {\r\n        var unsubscribe = onIdTokenChanged(auth, subscriber.next.bind(subscriber), subscriber.error.bind(subscriber), subscriber.complete.bind(subscriber));\r\n        return { unsubscribe: unsubscribe };\r\n    });\r\n}\r\n/**\r\n * Create an observable of idToken state. The observer is triggered for sign-in,\r\n * sign-out, and token refresh events\r\n * @param auth firebase.auth.Auth\r\n */\r\nfunction idToken(auth) {\r\n    return user(auth).pipe(switchMap(function (user) { return (user ? from(getIdToken(user)) : of(null)); }));\r\n}\r\n\r\nexport { authState, idToken, user };\r\n\n"],"mappings":"AAAA,SAASA,kBAAkB,EAAEC,gBAAgB,EAAEC,UAAU,QAAQ,eAAe;AAChF,SAASC,UAAU,EAAEC,IAAI,EAAEC,EAAE,QAAQ,MAAM;AAC3C,SAASC,SAAS,QAAQ,gBAAgB;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,SAASA,CAACC,IAAI,EAAE;EACrB,OAAO,IAAIL,UAAU,CAAC,UAAUM,UAAU,EAAE;IACxC,IAAIC,WAAW,GAAGV,kBAAkB,CAACQ,IAAI,EAAEC,UAAU,CAACE,IAAI,CAACC,IAAI,CAACH,UAAU,CAAC,EAAEA,UAAU,CAACI,KAAK,CAACD,IAAI,CAACH,UAAU,CAAC,EAAEA,UAAU,CAACK,QAAQ,CAACF,IAAI,CAACH,UAAU,CAAC,CAAC;IACrJ,OAAO;MAAEC,WAAW,EAAEA;IAAY,CAAC;EACvC,CAAC,CAAC;AACN;AACA;AACA;AACA;AACA;AACA;AACA,SAASK,IAAIA,CAACP,IAAI,EAAE;EAChB,OAAO,IAAIL,UAAU,CAAC,UAAUM,UAAU,EAAE;IACxC,IAAIC,WAAW,GAAGT,gBAAgB,CAACO,IAAI,EAAEC,UAAU,CAACE,IAAI,CAACC,IAAI,CAACH,UAAU,CAAC,EAAEA,UAAU,CAACI,KAAK,CAACD,IAAI,CAACH,UAAU,CAAC,EAAEA,UAAU,CAACK,QAAQ,CAACF,IAAI,CAACH,UAAU,CAAC,CAAC;IACnJ,OAAO;MAAEC,WAAW,EAAEA;IAAY,CAAC;EACvC,CAAC,CAAC;AACN;AACA;AACA;AACA;AACA;AACA;AACA,SAASM,OAAOA,CAACR,IAAI,EAAE;EACnB,OAAOO,IAAI,CAACP,IAAI,CAAC,CAACS,IAAI,CAACX,SAAS,CAAC,UAAUS,IAAI,EAAE;IAAE,OAAQA,IAAI,GAAGX,IAAI,CAACF,UAAU,CAACa,IAAI,CAAC,CAAC,GAAGV,EAAE,CAAC,IAAI,CAAC;EAAG,CAAC,CAAC,CAAC;AAC7G;AAEA,SAASE,SAAS,EAAES,OAAO,EAAED,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}