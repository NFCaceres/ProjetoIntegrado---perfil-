{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/auth\";\nexport class UserService {\n  constructor(auth) {\n    this.auth = auth;\n  }\n  // Função que recupera o usuário autenticado\n  getCurrentUser() {\n    return new Promise((resolve, reject) => {\n      this.auth.onAuthStateChanged(user => {\n        resolve(user);\n      }, error => {\n        reject(error);\n      });\n    });\n  }\n  // Função para atualizar as informações do usuário\n  updateUserInfo(displayName, photoURL) {\n    return this.auth.currentUser.then(user => {\n      if (user) {\n        return user.updateProfile({\n          displayName,\n          photoURL\n        });\n      }\n    });\n  }\n}\n_class = UserService;\n_class.ɵfac = function UserService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.AngularFireAuth));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["UserService","constructor","auth","getCurrentUser","Promise","resolve","reject","onAuthStateChanged","user","error","updateUserInfo","displayName","photoURL","currentUser","then","updateProfile","i0","ɵɵinject","i1","AngularFireAuth","factory","ɵfac","providedIn"],"sources":["C:\\projeto-integrado\\src\\app\\shared\\user.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { AngularFireAuth } from \"@angular/fire/compat/auth\"; \r\nimport { User } from 'firebase/auth';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\n\r\nexport class UserService {\r\n    constructor(private auth: AngularFireAuth) {}\r\n\r\n    // Função que recupera o usuário autenticado\r\n    getCurrentUser(): Promise<User | null> {\r\n        return new Promise((resolve, reject) => {\r\n            this.auth.onAuthStateChanged((user) => {\r\n                resolve(user);\r\n            }, (error) => {\r\n                reject(error);\r\n            });\r\n        });\r\n    }\r\n\r\n    // Função para atualizar as informações do usuário\r\n    updateUserInfo(displayName: string, photoURL: string): Promise<void> {\r\n        return this.auth.currentUser.then((user) => {\r\n            if (user) {\r\n                return user.updateProfile({\r\n                    displayName,\r\n                    photoURL,\r\n                });\r\n            }\r\n        });\r\n    }\r\n}\r\n"],"mappings":";;;AAQA,OAAM,MAAOA,WAAW;EACpBC,YAAoBC,IAAqB;IAArB,KAAAA,IAAI,GAAJA,IAAI;EAAoB;EAE5C;EACAC,cAAcA,CAAA;IACV,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI;MACnC,IAAI,CAACJ,IAAI,CAACK,kBAAkB,CAAEC,IAAI,IAAI;QAClCH,OAAO,CAACG,IAAI,CAAC;MACjB,CAAC,EAAGC,KAAK,IAAI;QACTH,MAAM,CAACG,KAAK,CAAC;MACjB,CAAC,CAAC;IACN,CAAC,CAAC;EACN;EAEA;EACAC,cAAcA,CAACC,WAAmB,EAAEC,QAAgB;IAChD,OAAO,IAAI,CAACV,IAAI,CAACW,WAAW,CAACC,IAAI,CAAEN,IAAI,IAAI;MACvC,IAAIA,IAAI,EAAE;QACN,OAAOA,IAAI,CAACO,aAAa,CAAC;UACtBJ,WAAW;UACXC;SACH,CAAC;;IAEV,CAAC,CAAC;EACN;;SAxBSZ,WAAW;;mBAAXA,MAAW,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,eAAA;AAAA;;SAAXnB,MAAW;EAAAoB,OAAA,EAAXpB,MAAW,CAAAqB,IAAA;EAAAC,UAAA,EAHR;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}